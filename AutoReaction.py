
# meta developer: @your_username


import asyncio
import logging
from telethon.tl.functions.messages import SetTypingRequest
from telethon.tl.types import Channel, Message
from .. import loader, utils

logger = logging.getLogger(__name__)


@loader.tds
class AutoReactionMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏—Ç —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö."""

    strings = {
        "name": "AutoReaction",
        "usage": "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> .au [@–∫–∞–Ω–∞–ª/ID] [—Ä–µ–∞–∫—Ü–∏—è]",
        "added": (
            "<b>‚úÖ –†–µ–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:</b>\n"
            "–ö–∞–Ω–∞–ª: <code>{chat}</code>\n"
            "–†–µ–∞–∫—Ü–∏—è: {reaction}\n"
            "ID –∞–≤—Ç–æ-—Ä–µ–∞–∫—Ü–∏–∏: <code>{id}</code>"
        ),
        "no_reactions": "<b>‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–π.</b>",
        "list_header": "<b>üìã –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–π:</b>\n\n",
        "removed": "<b>üóëÔ∏è –ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏—è —Å ID <code>{id}</code> —É–¥–∞–ª–µ–Ω–∞.</b>",
        "not_found": "<b>‚ö†Ô∏è –ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏—è —Å ID <code>{id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b>",
        "invalid_reaction": "<b>‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è.</b>",
    }

    strings_ru = {
        "usage": "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> .au [@–∫–∞–Ω–∞–ª/ID] [—Ä–µ–∞–∫—Ü–∏—è]",
        "added": (
            "<b>‚úÖ –†–µ–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:</b>\n"
            "–ö–∞–Ω–∞–ª: <code>{chat}</code>\n"
            "–†–µ–∞–∫—Ü–∏—è: {reaction}\n"
            "ID –∞–≤—Ç–æ-—Ä–µ–∞–∫—Ü–∏–∏: <code>{id}</code>"
        ),
        "no_reactions": "<b>‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–π.</b>",
        "list_header": "<b>üìã –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–π:</b>\n\n",
        "removed": "<b>üóëÔ∏è –ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏—è —Å ID <code>{id}</code> —É–¥–∞–ª–µ–Ω–∞.</b>",
        "not_found": "<b>‚ö†Ô∏è –ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏—è —Å ID <code>{id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b>",
        "invalid_reaction": "<b>‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è.</b>",
    }

    def __init__(self):
        self.reactions = {}
        self.reaction_counter = 0

    async def aucmd(self, message: Message):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ-—Ä–µ–∞–∫—Ü–∏—é.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .au [@–∫–∞–Ω–∞–ª/ID] [—Ä–µ–∞–∫—Ü–∏—è]
        """
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings("usage"))
            return

        try:
            chat_input, reaction = args.split(maxsplit=1)
        except ValueError:
            await utils.answer(message, self.strings("usage"))
            return

        try:
            chat = await self._client.get_entity(chat_input)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
            await utils.answer(message, "<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª/—á–∞—Ç.</b>")
            return

        chat_id = utils.get_chat_id(chat)

        if not reaction or len(reaction.strip()) == 0:
            await utils.answer(message, self.strings("invalid_reaction"))
            return

        self.reaction_counter += 1
        reaction_id = self.reaction_counter

        self.reactions[reaction_id] = {
            "chat_id": chat_id,
            "reaction": reaction.strip(),
        }

        await utils.answer(
            message,
            self.strings("added").format(
                chat=chat_input,
                reaction=reaction.strip(),
                id=reaction_id,
            ),
        )

    async def aulistcmd(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ-—Ä–µ–∞–∫—Ü–∏–π"""
        if not self.reactions:
            await utils.answer(message, self.strings("no_reactions"))
            return

        response = self.strings("list_header")
        for rid, data in self.reactions.items():
            response += f"‚Ä¢ ID: <code>{rid}</code>, –ß–∞—Ç: <code>{data['chat_id']}</code>, –†–µ–∞–∫—Ü–∏—è: {data['reaction']}\n"

        await utils.answer(message, response)

    async def audcmd(self, message: Message):
        """–£–¥–∞–ª—è–µ—Ç –∞–≤—Ç–æ-—Ä–µ–∞–∫—Ü–∏—é –ø–æ ID"""
        args = utils.get_args_raw(message)
        if not args.isdigit():
            await utils.answer(message, "<b>‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.</b>")
            return

        rid = int(args)
        if rid not in self.reactions:
            await utils.answer(message, self.strings("not_found").format(id=rid))
            return

        del self.reactions[rid]
        await utils.answer(message, self.strings("removed").format(id=rid))

    async def watcher(self, message: Message):
        """–°—Ç–∞–≤–∏—Ç —Ä–µ–∞–∫—Ü–∏—é, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ —á–∞—Ç–∞"""
        if not isinstance(message, Message) or not message.chat_id:
            return

        for rid, data in self.reactions.items():
            if message.chat_id == data["chat_id"]:
                try:
                    await self._client(SetTypingRequest(
                        peer=message.chat_id,
                        action=data["reaction"]
                    ))
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é: {e}")
